{"version":3,"sources":["components/Wrapper/Wrapper.js","components/MarioCard/MarioCard.js","App.js","registerServiceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","MarioCard","onClick","selectCharacter","charName","currentScore","alt","src","image","App","state","topScore","message","characters","unselectedCharacters","shuffleArray","array","i","length","j","Math","floor","random","temp","handleButtonClick","event","preventDefault","_this","setState","allCharacters","selectCharName","undefined","find","char","newUnselectedCharacters","filter","_this2","this","Jumbotron","Button","color","components_Wrapper_Wrapper","map","character","components_MarioCard_MarioCard","key","id","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e749a782.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => \n    <div className=\"wrapper\">\n        {props.children}\n    </div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./MarioCard.css\";\n\nconst MarioCard = props => (\n  <div className=\"card\">\n  <div className=\"img-container\">\n      {/*onClick will call selectCharacter in App.js and pass character parameter*/}\n      <a onClick={() => props.selectCharacter(props.charName)} \n          className={props.currentScore === 0 ? \"imgStyle imgStylePrevious\" : \"imgStyle\"}>\n          <img className=\"cusImg\" alt={props.charName} src={props.image} />\n      </a>\n  </div>\n</div>\n);\n\nexport default MarioCard;\n","import React, { Component } from 'react';\nimport characters from './characters.json';\nimport Wrapper from './components/Wrapper';\nimport MarioCard from './components/MarioCard';\n// import Jumbotron from './components/Jumbotron';\nimport {Jumbotron, Button} from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    message: \"Click an image to begin.\",\n    characters: characters,\n    unselectedCharacters: characters\n  };\n\n  //Shuffle Array function\n  shuffleArray = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          let temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n      };\n  };\n\n  //Function to reset State to initial state on click\n  handleButtonClick = event => {\n      event.preventDefault();\n      this.setState({\n        currentScore: 0,\n        topScore: 0,\n        message: \"Click an image to begin.\",\n        allCharacters: characters,\n        unselectedCharacters: characters\n      });\n  };\n\n  //selectCharacter is called by onClick event in MarioCard.js\n  //and receives character parameter\n  selectCharacter = selectCharName => {\n    //Using array.find function to find the first element in unselectedCharacters array that sattisfies the condition\n    //if no character matched then findCharacter will equals to undefined\n    const findCharacter = this.state.unselectedCharacters.find(char => char.charName === selectCharName);\n\n    //If no character found in the unselectedCharacters array\n    //Then setState for State properties: topScore will be replaced with currentScore if currentScore is higher than topScore\n    //and start new game\n    if (findCharacter === undefined) {\n        this.setState({\n            message: \"You guessed incorrectly!\",\n            topScore: (this.state.currentScore > this.state.topScore) ? this.state.currentScore : this.state.topScore,\n            currentScore: 0,\n            allCharacters: characters,\n            unselectedCharacters: characters\n        });\n    }\n    //If character is found in the unselectedCharacters array\n    //Then use array.filter to create a new array (newunselectedCharacters)\n    else {\n        const newUnselectedCharacters = this.state.unselectedCharacters.filter(char => char.charName !== selectCharName);\n\n        this.setState({\n            message: \"You guessed correctly!\",\n            currentScore: this.state.currentScore + 1,\n            allCharacters: characters,\n            unselectedCharacters: newUnselectedCharacters\n        });\n    };//End else\n\n    //Invoke shuffleArray to shuffle images array\n    this.shuffleArray(characters);\n  };//End if\n\n  render() {\n    return (\n      <div>           \n        <div className=\"App\">\n            <Jumbotron>\n                <h2 className=\"App-title\">Mario Memory Challenge Game</h2>\n                <p className=\"message\">+++++++++++++++++++++++++++++++</p>\n                <p className=\"message\">{this.state.message}</p>\n                <p className=\"message\">Current Score: {this.state.currentScore}</p>\n                <p className=\"message\">Top Score: {this.state.topScore}</p>\n                <Button color=\"danger\" onClick={this.handleButtonClick}>Start Over </Button>\n            </Jumbotron>\n        </div>\n        <Wrapper>\n            {\n              //map function iterates thru characters array and displays individual image\n              //and pass to MarioCard with key, character, charImage, currentScore and function selectCharacter \n              this.state.characters.map(character => (\n                  <MarioCard \n                      key={character.id}\n                      charName = {character.charName}\n                      image = {character.image}\n                      currentScore = {this.state.currentScore}\n                      selectCharacter = {this.selectCharacter}\n                  />\n              ))\n            }\n      </Wrapper>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}